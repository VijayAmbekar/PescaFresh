openapi: 3.0.0
info:
  version: 1.0.0
  title: Fresh SeaFood
  description: Fresh SeaFood
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/techsurfer/fresh-seafood-api/1.0.0
paths:
  /city:
    get:
      tags:
        - city
      summary: Get all cities
      operationId: getCities
      parameters:
        - name: offset
          in: query
          description: city offset to fetch data from
          required: false
          example: 0
          schema:
            type: integer
            format: int64
        - name: pageSize
          in: query
          description: count of items to return
          required: false
          example: 0
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Bad Request
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'

    post:
      tags:
        - city
      summary: Create a city
      operationId: createCity
      requestBody:
        $ref: '#/components/requestBodies/City'
      responses:
        '400':
          description: Bad Request
        '201':
          description: Created successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
            application/json:
              schema:
                $ref: '#/components/schemas/City'
    put:
      tags:
        - city
      summary: Updates a city
      operationId: updateCity
      requestBody:
        $ref: '#/components/requestBodies/City'
      responses:
        '400':
          description: Bad Request
        '405':
          description: Validation failed
        '200':
          description: Updated successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
            application/json:
              schema:
                $ref: '#/components/schemas/City'

  '/city/{id}':
    get:
      tags:
        - city
      summary: Find city by ID
      description: Returns a single city
      operationId: getCityById
      parameters:
        - name: id
          in: path
          description: ID of city to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
            application/json:
              schema:
                $ref: '#/components/schemas/City'
        '404':
          description: City not found

    delete:
      tags:
        - city
      summary: Delete city provided by ID
      description: Delete city
      operationId: deleteCityById
      parameters:
        - name: id
          in: path
          description: ID of city to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '404':
          description: City not found

  '/city/count':
    get:
      tags:
        - city
      summary: Find city count
      description: Returns count of cities
      operationId: getCityCount
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: integer
                format: int64
                example: 30
            application/json:
              schema:
                type: integer
                format: int64
                example: 30
        '404':
          description: City not found

  /country:
    get:
      tags:
        - country
      summary: Get all countries
      operationId: getCountries
      parameters:
        - name: offset
          in: query
          description: country offset to fetch data from
          required: false
          example: 0
          schema:
            type: integer
            format: int64
        - name: pageSize
          in: query
          description: count of items to return
          required: false
          example: 0
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Bad Request
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
    post:
      tags:
        - country
      summary: Create a country
      operationId: createCountry
      requestBody:
        $ref: '#/components/requestBodies/Country'
      responses:
        '400':
          description: Bad Request
        '201':
          description: Created successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Country'
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
    put:
      tags:
        - country
      summary: Updates a country
      operationId: updateCountry
      requestBody:
        $ref: '#/components/requestBodies/UpdateCountry'
      responses:
        '400':
          description: Bad Request
        '405':
          description: Validation failed
        '200':
          description: Updated successfully
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Country'
            application/json:
              schema:
                $ref: '#/components/schemas/Country'

  '/country/{id}':
    get:
      tags:
        - country
      summary: Find country by ID
      description: Returns a single country
      operationId: getCountryById
      parameters:
        - name: id
          in: path
          description: ID of country to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Country'
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
        '404':
          description: Country not found

    delete:
      tags:
        - country
      summary: Delete country provided by ID
      description: Delete country
      operationId: deleteCountryById
      parameters:
        - name: id
          in: path
          description: ID of country to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '404':
          description: Country not found

  '/country/count':
    get:
      tags:
        - country
      summary: Find country count
      description: Returns count of countries
      operationId: getCountryCount
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: integer
                format: int64
                example: 30
            application/json:
              schema:
                type: integer
                format: int64
                example: 30
        '404':
          description: Country not found

components:
  schemas:
    Country:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: "India"
      xml:
        name: Country

    City:
      type: object
      required:
        - name
        - id
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: "Panaji"
        state:
          type: string
          example: "Goa"
        country:
          type: string
          example: "India"
      xml:
        name: City

  requestBodies:
    Country:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: "India"
            xml:
              name: Country
    UpdateCountry:
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - name
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
                example: "India"
            xml:
              name: UpdateCountry



    City:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/City'
        application/xml:
          schema:
            $ref: '#/components/schemas/City'
      description: City object that needs to be added to the store
      required: true